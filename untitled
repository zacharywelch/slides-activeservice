<!doctype html>
<html lang="en">

  <head>
    <meta charset="utf-8">

    <title>ActiveService Tips &amp; Tricks</title>

    <meta name="description" content="A framework for easily creating beautiful presentations using HTML">
    <meta name="author" content="Zachary Welch">

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

    <link rel="stylesheet" href="css/reveal.css">
    <link rel="stylesheet" href="css/theme/kabu.css" id="theme">

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="lib/css/zenburn.css">

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->

    <style>
      .danger { color: #ee6565; }
      .success { color: #56b881; }
      .strikethrough { text-decoration: line-through; }
      .reveal h3,
      section[data-markdown] h6 { text-transform: none; }
    </style>
  </head>

  <body>

    <div class="reveal">

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section>
          <h1>Active Service</h1>
          <h3>Tips &amp; Magical Spells</h3>
          <p>
            <small>by <a href="mailto:zachary.welch@careerbuilder.com">zachary welch</a> / <a href="http://cb-kabu.herokuapp.com/team.html">wannabe hokage</a></small>
          </p>
        </section>

        <section data-background="#3887be" data-background-transition="zoom">
          <h2>Retrieving Objects</h2>
        </section>

        <section data-markdown>
          <script type="text/template">
            ### .find(id)
            ```ruby              
            class User < ActiveService::Base
              attribute :email
            end

            > users = User.find(1)
            # GET /users/1
            ```
          </script>
        </section>

        <section data-markdown>
          <script type="text/template">
            ### .find(*ids)
            ```ruby              
            class User < ActiveService::Base
              attribute :email
            end

            > users = User.find([1,2])
            # GET /users/1 and GET /users/2
            ```
          </script>
        </section>

        <section data-markdown data-transition='none'>
          <script type="text/template">
            ### .where
            ```ruby              
            class User < ActiveService::Base
              attribute :email
            end

            > users = User.where(email: "foo@bar.com")
            # GET /users?email=foo@bar.com
            ```
          </script>
        </section>

        <section data-markdown data-transition='none'>
          <script type="text/template">
            ### association.where
            ```ruby              
            class User < ActiveService::Base
              has_many :microposts
            end

            class Micropost < ActiveService::Base
              attribute :approved
            end
            
            > user = User.find(1)
            # GET /users/1
            > user.microposts.where(approved: true)
            # GET /users/1/microposts?approved=true
            ```
          </script>
        </section>

        <section data-markdown data-transition='none'>
          <script type="text/template">
            ### .first_or_create
            ```ruby              
            
            class User < ActiveService::Base
              attribute :email
            end

            > user = User.first_or_create(email: "foo@bar.com")
            # GET /users?email=foo@bar.com
            # POST /users { "email": "foo@bar.com" }
            
            > user.persisted? # => true
            ```
          </script>
        </section>          

        <section data-markdown data-transition='none'>
          <script type="text/template">
            ### .where.first_or_create
            ```ruby              
            
            class User < ActiveService::Base
              attribute :email
            end

            > user = User.where(email: "foo@bar.com").first_or_create
            # GET /users?email=foo@bar.com
            # POST /users { "email": "foo@bar.com" }

            > user.persisted? # => true
            ```
          </script>
        </section>          

        <section data-markdown>
          <script type="text/template">
            ### .first_or_initialize            
            ```ruby              
            
            class User < ActiveService::Base
              attribute :email
            end

            > user = User.first_or_initialize(email: "foo@bar.com")
            # GET /users?email=foo@bar.com
            
            > user.persisted? # => false
            > user.new? # => true
            ```
          </script>
        </section>          
        
        <section data-background="#418B61" data-background-transition="zoom">
          <h2>Associations</h2>
        </section>

        <section data-markdown>
          <script type="text/template">
            ###### :class_name
            ```ruby              
            class User < ActiveService::Base
              has_many :comments, class_name: "Micropost"
            end

            class Micropost < ActiveService::Base
            end
            
            > user = User.find(1)
            > user.comments
            # GET /users/1/microposts
            # => [#<Micropost id=1>, #<Micropost id=2>]
            ```
          </script>
        </section>

        <section data-markdown>
          <script type="text/template">
            ###### :foreign_key
            ```ruby              
            class Employee < ActiveService::Base
              attribute :org_id
              belongs_to :organization, foreign_key: "org_id"
            end

            > employee = Employee.find(1)
            # => #<Employee id=1 org_id=10>
            
            > employee.organization
            # GET /organizations/10
            ```
          </script>
        </section>

        <section data-markdown>
          <script type="text/template">
            ###### collection_singular_ids
            ```ruby              
            class User < ActiveService::Base
              has_many :microposts
            end

            class Micropost < ActiveService::Base
            end
            
            > user = User.find(1)
            > user.micropost_ids
            # GET /users/1/microposts
            # => [1,2]
            ```
          </script>
        </section>

        <section data-markdown>
          <script type="text/template">
            ###### .create
            ```ruby              

            > user = User.find(1)
            # GET /users/1              
            > user.microposts.create(content: "Hodor hodor.")
            # POST /users/1/microposts { "content": "Hodor hodor." }
            ```
          </script>
        </section>                         

        <section data-markdown>
          <script type="text/template">
            ###### .build
            ```ruby              

            > user = User.find(1)
            # GET /users/1              
            > micropost = user.microposts.build(content: "Hodor hodor.")
            # => #<Micropost user_id=1 content="Hodor hodor.">
            ```
          </script>
        </section>                         

        <section>
          <h6>accepts_nested_attributes_for</h6>
          <img data-src="img/accepts_nested_attributes_for.png">
        </section>

        <section data-background="#464666" data-background-transition="zoom">
          <h2>Callbacks</h2>
        </section>

        <section data-markdown data-transition="none">
          <script type="text/template">
            ```ruby              
            class Order < ActiveService::Base
              before_save :normalize_card_number
            end

            ```
          </script>
        </section>                         

        <section data-markdown data-transition="none">
          <script type="text/template">
            ```ruby              
            class Order < ActiveService::Base
              before_save :normalize_card_number, if: :paid_with_card?
            end

            ```
          </script>
        </section> 

        <section>
          <h3>Available callbacks</h3>
          <ul>
            <li>before_save</li>
            <li>before_create</li>
            <li>before_update</li>
            <li>before_destroy</li>
            <li>after_save</li>
            <li>after_create</li>
            <li>after_update</li>
            <li>after_destroy</li>
          </ul>
        </section>                        

        <section data-background="#418B61" data-background-transition="zoom">
          <h2>Attributes</h2>
        </section>

        <section data-background-transition="zoom">
          <h2>Thanks <span class='success'>:)</span></h2>
        </section>


      </div>

    </div>

    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        controls: true,
        progress: true,
        history: true,
        center: true,

        transition: 'slide', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
          { src: 'plugin/zoom-js/zoom.js', async: true },
          { src: 'plugin/notes/notes.js', async: true }
        ]
      });

    </script>

  </body>
</html>
